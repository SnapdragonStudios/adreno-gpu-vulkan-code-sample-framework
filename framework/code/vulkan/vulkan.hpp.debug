//=============================================================================
//
//
//                  Copyright (c) 2020 QUALCOMM Technologies Inc.
//                              All Rights Reserved.
//
//==============================================================================
#pragma once

#ifdef OS_WINDOWS
#define NOMINMAX
#include <Windows.h>
#define VK_USE_PLATFORM_WIN32_KHR
#elif OS_ANDROID
#define VK_USE_PLATFORM_ANDROID_KHR
#endif // OS_WINDOWS | OS_WINDOWS

// This definition allows prototypes of Vulkan API functions,
// rather than dynamically loading entrypoints to the API manually.
#define VK_PROTOTYPES

#define VK_ENABLE_BETA_EXTENSIONS
#include <vulkan/vulkan.h>
#ifdef OS_ANDROID
#include "VK_QCOM_render_pass_transform.h"
#endif // OS_ANDROID

#include <vector>
#include <functional>
#include <optional>
#include <string>
#include "tcb/span.hpp"
#include "memory/memoryManager.hpp"

// This should actually be defined in the makefile!
#define USES_VULKAN_DEBUG_LAYERS
// Enable the Vulkan validation layer to also flag 'best practices' (if the debug/validation layers are in use)
//#define VULKAN_VALIDATION_ENABLE_BEST_PRACTICES
// Enable the Vulkan validation layer to also flag 'syncronization' issues (if the debug/validation layers are in use)
//#define VULKAN_VALIDATION_ENABLE_SYNCHRONIZATION

#define NUM_VULKAN_BUFFERS      4   // Kept track of with mSwapchainCurrentIdx

// Comment this in if you need AHB support in your app (should be part of application configuration in the future).  May interfere with profiling!
//#define ANDROID_HARDWARE_BUFFER_SUPPORT

// Forward declarations
struct ANativeWindow;

bool CheckVkError(const char* pPrefix, VkResult CheckVal);

//=============================================================================
// Enumerations
//=============================================================================
enum class RenderPassInputUsage {
    Clear,
    Load,
    DontCare
};

enum class RenderPassOutputUsage {
    Discard,
    Store,
    StoreReadOnly,
    StoreTransferSrc,
    Present,        // Pass writing to the backbuffer
    Clear           //needs exension
};

//=============================================================================
// Structures
//=============================================================================

/// Single Swapchain image
typedef struct _SwapchainBuffers
{
    VkImage         image;
    VkImageView     view;
    VkFence         fence;
    VkSemaphore     semaphore;
} SwapchainBuffers;

/// DepthBuffer memory, image and view
typedef struct _DepthInfo
{
    VkFormat                          format;
    VkImageView                       view;
    MemoryVmaAllocatedBuffer<VkImage> image;
} DepthInfo;

//=============================================================================
// Vulkan
//=============================================================================
class Vulkan
{
    Vulkan(const Vulkan&) = delete;
    Vulkan& operator=(const Vulkan&) = delete;
public:
    Vulkan();
    virtual ~Vulkan();

    struct AppConfiguration
    {
        /// (optional) override of the priority used to initialize the async queue (assuming VK_EXT_global_priority is available and loaded)
        std::optional<VkQueueGlobalPriorityEXT> AsyncQueuePriority;
        /// (optional) override of the framebuffer depth format.  Setting to VK_FORMAT_UNDEFINED will disable the creation of a depth buffer during InitSwapChain
        std::optional<VkFormat> SwapchainDepthFormat;
        /// (optional) list of 'additional' layer extensions that this app requires.  DO NOT resize this (past initial construction) as the contained strings are pointed to by m_pDeviceExtensionNames
        std::vector<std::string> AdditionalVulkanLayerExtensions;
    };

    typedef std::function<int(tcb::span<const VkSurfaceFormatKHR>)> tSelectSurfaceFormatFn;
    typedef std::function<void(AppConfiguration&)> tConfigurationFn;
    bool Init(uintptr_t hWnd, uintptr_t hInst, const tSelectSurfaceFormatFn& SelectSurfaceFormatFn = nullptr, const tConfigurationFn& CustomConfigurationFn = nullptr);

    void Terminate();

    /// Set surface format to given format and re-create all the dependant items.
    /// Does nothing if newSurfaceFormat is same as existing otherwise calls RecreateSwapChain.
    /// @return true on success.
    bool ChangeSurfaceFormat(VkSurfaceFormatKHR newSurfaceFormat);
    /// Rebuild the swapchain (and all dependant objects).
    /// Tears down and re-initializes swap chain, command buffers, render passes and frame buffers (owned by the Vulkan class)
    /// Waits for GPU to be idle before running.
    /// Will reset the current frame index.
    /// @return true on success.
    bool RecreateSwapChain();

    /// Current buffer index (that can be filled) and the fence that should be signalled when the GPU completes this buffer and the semaphore to wait on before starting rendering.
    struct BufferIndexAndFence
    {
        /// Current frame index (internal - always in order)
        const uint32_t      idx;
        /// Current backbuffer index (from vkAcquireNextImageKHR - may be 'out of order')
        const uint32_t      swapchainPresentIdx;
        const VkFence       fence;
        /// Backbuffer semaphore (start of rendering pipeline needs to wait for this)
        const VkSemaphore   semaphore;
    };

    /// Get the next image to render to and the fence to signal at the end, then queue a wait until the image is ready
	/// @return index of next backbuffer and the fence to signal upon comdbuffer completion.  May not be in sequential order!
    BufferIndexAndFence SetNextBackBuffer();


    /// Run vkSubmitQueue for the given command buffer(s)
    bool QueueSubmit( const tcb::span<const VkCommandBuffer> CommandBuffers, const tcb::span<const VkSemaphore> WaitSemaphores, const tcb::span<const VkPipelineStageFlags> WaitDstStageMasks, const tcb::span<const VkSemaphore> SignalSemaphores, bool UseComputeCmdPool, VkFence CompletedFence );
    /// Run vkSubmitQueue for the given command buffer(s) (simplified helper)
    bool QueueSubmit( VkCommandBuffer CommandBuffer, VkSemaphore WaitSemaphore, VkPipelineStageFlags WaitDstStageMask, VkSemaphore SignalSemaphore, bool UseComputeCmdPool, VkFence CompletedFence )
    {
        auto WaitSemaphores = (WaitSemaphore!=VK_NULL_HANDLE) ? tcb::span<VkSemaphore>( &WaitSemaphore, 1 ) : tcb::span<VkSemaphore>();
        auto SignalSemaphores = (SignalSemaphore!=VK_NULL_HANDLE) ? tcb::span<VkSemaphore>( &SignalSemaphore, 1 ) : tcb::span<VkSemaphore>();
        return QueueSubmit( { &CommandBuffer,1 }, WaitSemaphores, { &WaitDstStageMask, 1 }, SignalSemaphores, UseComputeCmdPool, CompletedFence );
    }

    /// Run the vkQueuePresentKHR
    bool PresentQueue(const tcb::span<const VkSemaphore> pWaitSemaphores, uint32_t SwapchainPresentIndx);
    /// Run the vkQueuePresentKHR (simplified helper)
    bool PresentQueue( VkSemaphore WaitSemaphore, uint32_t SwapchainPresentIndx )
    {
        auto WaitSemaphores = (WaitSemaphore!=VK_NULL_HANDLE) ? tcb::span<VkSemaphore>( &WaitSemaphore, 1 ) : tcb::span<VkSemaphore>();
        return PresentQueue( WaitSemaphores, SwapchainPresentIndx );
    }

    void DumpSwapchainImage(const char* filename, uint32_t swapchainIdx, bool dumpColor, uint32_t mipLevel, uint32_t arrayLayer);

    VkCommandBuffer StartSetupCommandBuffer();
    void FinishSetupCommandBuffer(VkCommandBuffer setupCmdBuffer);

    VkCompositeAlphaFlagBitsKHR     GetBestVulkanCompositeAlpha();
    /// @brief return the supported depth format with the highest precision depth/stencil supported with optimal tiling
    /// @param NeedStencil set if we have to have a format with stencil bits (defaulted to false).
    VkFormat                        GetBestVulkanDepthFormat(bool NeedStencil = false);
    /// @return true if the given format is a depth stencil format (must have stencil), otherwise return false
    static bool FormatHasStencil( VkFormat );
    /// @return true if the given format is a depth buffer format (may or may not have stencil), otherwise return false
    static bool FormatHasDepth( VkFormat );
    /// @return true if the given format is a block compressed format, otherwise return false
    static bool FormatIsCompressed( VkFormat );
    /// Check if the Vulkan device supports the given texture format.
    /// Typically used to check block compression formats when loading images.
    /// @return true if format is supported
    bool IsTextureFormatSupported( VkFormat ) const;

    void SetImageLayout(VkImage image,
        VkCommandBuffer cmdBuffer,
        VkImageAspectFlags aspect,
        VkImageLayout oldLayout,
        VkImageLayout newLayout,
        VkPipelineStageFlags srcMask = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
        VkPipelineStageFlags dstMask = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
        uint32_t mipLevel = 0,
        uint32_t mipLevelCount = 1,
        uint32_t baseLayer = 0,
        uint32_t layerCount = 1);

    /// @brief Create a VkRenderPass (single subpass) with the given parameters. 
    /// When we have ResolveFormats we resolve each member of ColorFormats out to a matching ResolveFormats buffer (unless ResolveFormat is VK_FORMAT_UNDEFINED, render pass expects ColorPass + number of defined Resolve buffers - resolve buffers must be VK_SAMPLE_COUNT_1_BIT)
    /// @param ColorFormats Format and usage of all expected color buffers.
    /// @param DepthFormat Format and usage of the depth buffer.
    /// @param Msaa antialiasing for all the color/depth buffers
    /// @param ShouldClearDepth true if the renderpass should clear the depth buffer before use
    /// @param pRenderPass output
    /// @param ResolveFormats - the render pass will resolve to each of these, each entry corresponds to entry in ColorFormats - if VK_FORMAT_UNDEFINED then that color format slot is not resolved
    /// @param pName - optional renderpass name for debugging
    /// @return 
    bool CreateRenderPass(
        tcb::span<const VkFormat> ColorFormats,
        VkFormat DepthFormat,
        VkSampleCountFlagBits Msaa,
        RenderPassInputUsage ColorInputUsage,
        RenderPassOutputUsage ColorOutputUsage,
        bool ShouldClearDepth,
        RenderPassOutputUsage DepthOutputUsage,
        VkRenderPass* pRenderPass/*out*/,
        tcb::span<const VkFormat> ResolveFormats = {},
        const char* pName = nullptr);

    /// @brief Create a render pass pipeline.
    /// @param pipelineCache (optional) vulkan pipeline cache
    /// @param visci (required) vertex input state
    /// @param pipelineLayout (required) Vulkan pipeline layout
    /// @param renderPass (required) render pass to make this pipeline for
    /// @param subpass (required) subpass number (0 if first subpass or not using subpasses)
    /// @param providedRS (optional) rasterization state
    /// @param providedDSS (optional) depth stencil state
    /// @return true on success
    bool CreatePipeline(
        VkPipelineCache                         pipelineCache,
        const VkPipelineVertexInputStateCreateInfo* visci,
        VkPipelineLayout                        pipelineLayout,
        VkRenderPass                            renderPass,
        uint32_t                                subpass,
        const VkPipelineRasterizationStateCreateInfo* providedRS,
        const VkPipelineDepthStencilStateCreateInfo*  providedDSS,
        const VkPipelineColorBlendStateCreateInfo*    providedCBS,
        const VkPipelineMultisampleStateCreateInfo*   providedMS,
        tcb::span<const VkDynamicState>         dynamicStates,
        const VkViewport*                       viewport,
        const VkRect2D*                         scissor,
        VkShaderModule                          vertShaderModule,
        VkShaderModule                          fragShaderModule,
        bool                                    bAllowDerivation,
        VkPipeline                              deriveFromPipeline,
        VkPipeline*                             pipeline);
    bool CreateComputePipeline(
        VkPipelineCache  pipelineCache,
        VkPipelineLayout pipelineLayout,
        VkShaderModule   computeModule,
        VkPipeline* pipeline);

    bool SetSwapchainHrdMetadata(const VkHdrMetadataEXT& RenderingHdrMetaData);

    // Accessors
    MemoryManager& GetMemoryManager() { return m_MemoryManager; }
    const MemoryManager& GetMemoryManager() const { return m_MemoryManager; }
    VkInstance GetVulkanInstance() const { return m_VulkanInstance; }
    uint32_t GetVulkanQueueIndx() const { return m_VulkanGraphicsQueueIndx; }
    const auto& GetGpuProperties() const { return m_VulkanGpuProperties; }
    const auto& GetGpuSubgroupProperties() const { return m_VulkanGpuSubgroupProperties; }
    bool GetExtGlobalPriorityAvailable() const { return m_ExtGlobalPriorityAvailable; }
    bool GetExtRenderPassShaderResolveAvailable() const { return m_ExtRenderPassShaderResolveAvailable; }
    bool GetExtDescriptorIndexingAvailable() const { return m_ExtDescriptorIndexingAvailable; }
    bool GetExtRenderPassTransformAvailable() const { return m_ExtRenderPassTransformAvailable; }
    const std::vector<VkSurfaceFormatKHR>& GetVulkanSurfaceFormats() const { return m_SurfaceFormats; }
    VkSurfaceTransformFlagBitsKHR GetPreTransform() const { return m_SwapchainPreTransform; }

    bool HasLoadedVulkanDeviceExtension(const char* extensionName) const; ///< Returns true if the named extension is loaded.

    bool FillRenderPassTransformBeginInfoQCOM(VkRenderPassTransformBeginInfoQCOM& ) const;
    bool FillCommandBufferInheritanceRenderPassTransformInfoQCOM(VkCommandBufferInheritanceRenderPassTransformInfoQCOM& ) const;

    bool SetDebugObjectName( uint64_t object, VkObjectType objectType, const char* name );
    bool SetDebugObjectName( VkCommandBuffer cmdBuffer, const char* name )
    {
        return SetDebugObjectName( (uint64_t)cmdBuffer, VK_OBJECT_TYPE_COMMAND_BUFFER, name );
    }
    bool SetDebugObjectName( VkImage image, const char* name )
    {
        return SetDebugObjectName( (uint64_t)image, VK_OBJECT_TYPE_IMAGE, name );
    }
    bool SetDebugObjectName( VkRenderPass renderPass, const char* name )
    {
        return SetDebugObjectName( (uint64_t)renderPass, VK_OBJECT_TYPE_RENDER_PASS, name );
    }
    bool SetDebugObjectName( VkPipeline pipeline, const char* name )
    {
        return SetDebugObjectName( (uint64_t)pipeline, VK_OBJECT_TYPE_PIPELINE, name );
    }
    bool SetDebugObjectName( VkFramebuffer framebuffer, const char* name )
    {
        return SetDebugObjectName( (uint64_t)framebuffer, VK_OBJECT_TYPE_FRAMEBUFFER, name );
    }

    // Static helpers
    static const char* VulkanFormatString(VkFormat WhichFormat);
    static const char* VulkanColorSpaceString(VkColorSpaceKHR ColorSpace);

private:
    // Vulkan takes a huge amount of code to initialize :)
    // Break up into multiple smaller functions.
    bool CreateInstance();
    void InitInstanceExtensions();
    bool GetPhysicalDevices();
    void InitDeviceExtensions();
    bool InitQueue();
    bool InitInstanceFunctions();

#ifdef USES_VULKAN_DEBUG_LAYERS
    bool InitDebugCallback();
    bool ReleaseDebugCallback();
#endif // USES_VULKAN_DEBUG_LAYERS

    bool InitSurface();
    bool InitCompute();
    bool InitDevice();
    bool InitSyncElements();
    bool InitCommandPools();
    bool InitMemoryManager();
    bool QuerySurfaceCapabilities();
    bool InitSwapChain();
    bool InitSwapchainRenderPass();
    bool InitFrameBuffers();

    void DestroySwapChain();
    void DestroySwapchainRenderPass();
    void DestroyFrameBuffers();

    struct PhysicalDeviceFeatures;
    static void QueryPhysicalDeviceFeatures(VkPhysicalDevice, PhysicalDeviceFeatures& featuresOut);

    static void DumpDeviceInfo(const tcb::span<const VkPhysicalDevice> pDevices);

public:
    uint32_t                m_SurfaceWidth;     ///< Swapchain width
    uint32_t                m_SurfaceHeight;    ///< Swapchain height

    // Public Vulkan objects
    VkDevice                m_VulkanDevice;
    VkQueue                 m_VulkanQueue;
    VkCommandPool           m_VulkanCmdPool;
    VkQueue                 m_VulkanAsyncComputeQueue;
    VkCommandPool           m_VulkanAsyncComputeCmdPool;

    VkPhysicalDevice        m_VulkanGpu;

    VkSemaphore             m_RenderCompleteSemaphore;
    VkFence                 m_Fence;

    // Swapchain is really the back buffers.  Anything else is a render target
    uint32_t                m_SwapchainImageCount;
    VkSwapchainKHR          m_VulkanSwapchain;

    std::vector<SwapchainBuffers> m_pSwapchainBuffers;
    DepthInfo               m_SwapchainDepth;       // ... but they all use the same depth

    VkRenderPass            m_SwapchainRenderPass;
    std::vector<VkFramebuffer> m_pSwapchainFrameBuffers;

    VkFormat                m_SurfaceFormat;        // Current surface format
    VkColorSpaceKHR         m_SurfaceColorSpace;    // Current surface colorspace
    bool                    m_UseRenderPassTransform;     // If set attempt to disable the surfaceflinger doing backbuffer rotation and to use the Qualcomm render pass transform extension, assumes the application will render in the device's default orientation
    bool                    m_UsePreTransform;      // If set attempt to disable the surfaceflinger doing backbuffer rotation without enabling the Qualcomm render pass transform extension.  Assumes the application will render to the rotated backbuffer.

private:
#if defined(OS_WINDOWS)
    HINSTANCE               m_hInstance;
    HWND                    m_hWnd;
#elif defined(OS_ANDROID)
    ANativeWindow*           m_pAndroidWindow;
#endif // defined(OS_WINDOWS)

    /// App driven configuration overrides (setup by app before Vulkan is initialized in order to potentially override default Vulkan configuration settings)
    AppConfiguration        m_ConfigOverride;

    /// Current frame index (internal - always in order)
    uint32_t                m_SwapchainCurrentIndx;

    // Debug/Validation Layers
    std::vector<VkLayerProperties>      m_InstanceLayerProps;
    std::vector<VkExtensionProperties>  m_InstanceExtensionProps;

    /// Layers we want to use (sorted alphabetically)
    std::vector<const char*>            m_InstanceLayerNames;
    /// Extensions we want to use (sorted alphabetically)
    std::vector<const char*>            m_InstanceExtensionNames;

    // Vulkan Objects
    VkInstance                          m_VulkanInstance;
    uint32_t                            m_VulkanGpuCount;
    VkPhysicalDeviceProperties2         m_VulkanGpuProperties;
    VkPhysicalDeviceSubgroupProperties  m_VulkanGpuSubgroupProperties;
    VkPhysicalDeviceMemoryProperties    m_PhysicalDeviceMemoryProperties;

    struct PhysicalDeviceFeatures
    {
        VkPhysicalDeviceFeatures2                        Base = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 };
        VkPhysicalDevice16BitStorageFeatures             Storage16Bit = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR };
#if VK_KHR_shader_float16_int8
        VkPhysicalDeviceShaderFloat16Int8FeaturesKHR     ShaderFloat16Int8 = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR };
#endif
#if VK_EXT_descriptor_indexing
        VkPhysicalDeviceDescriptorIndexingFeaturesEXT    DescriptorIndexing = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT };
#endif
#if VK_KHR_buffer_device_address
        VkPhysicalDeviceBufferDeviceAddressFeaturesKHR   BufferDeviceAddress = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR };
#endif
#if VK_KHR_acceleration_structure
        VkPhysicalDeviceAccelerationStructureFeaturesKHR AccelerationStructure = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR };
#endif
#if VK_KHR_ray_tracing_pipeline
        VkPhysicalDeviceRayTracingPipelineFeaturesKHR    RayTracing = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR };
#endif
#if VK_KHR_ray_query
        VkPhysicalDeviceRayQueryFeaturesKHR              RayQuery = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR };
#endif
    };

    /// Features used in call to vkCreateDevice (ie the features available for the current device).
    PhysicalDeviceFeatures              m_VulkanGpuFeatures;

    uint32_t                            m_NumDeviceLayerProps = 0;
    VkLayerProperties*                  m_pDeviceLayerProps = nullptr;

    uint32_t                            m_NumDeviceExtensionProps = 0;
    VkExtensionProperties*              m_pDeviceExtensionProps = nullptr;

    std::vector<const char*>            m_pDeviceLayerNames;            ///< Requested/Loaded device layers
    std::vector<const char*>            m_pDeviceExtensionNames;        ///< Requested/Loaded device extensions

    bool                                m_LayerKhronosValidationAvailable;
    bool                                m_ExtDebugUtilsAvailable;
    bool                                m_ExtGlobalPriorityAvailable;
    bool                                m_ExtSwapchainColorspaceAvailable;
    bool                                m_ExtHdrMetadataAvailable;
    bool                                m_ExtSampleLocationsAvailable;
    bool                                m_ExtSurfaceCapabilities2Available;
    bool                                m_ExtRenderPassTransformAvailable;
    bool                                m_ExtRenderPassTransformEnabled;    ///< Set when the device is using the renderpasstransform extension (ie display pre-rotation is happening and m_ExtRenderPassTransformAvailable)
    bool                                m_ExtRenderPassTransformLegacy;     ///< Use the 'legacy' interface to VK_QCOM_render_pass_transform (older drivers)
    bool                                m_ExtRenderPassShaderResolveAvailable;
    bool                                m_ExtDescriptorIndexingAvailable;
    bool                                m_ExtPortability;                   ///< Vulkan Portability extension present (and so must be enabled).  Limited subset of Vulkan functionality (for backwards compatibility with other graphics api)
    bool                                m_ExtShaderFloat16Int8;             ///< Set when VK_KHR_shader_float16_int8 extension is present (and loaded)
    uint32_t                            m_ExtValidationFeaturesVersion;     ///< Version of the VK_EXT_validation_features extension (0 validation is disabled and/or extension not loaded)
    std::vector<std::string>            m_AdditionalExtAvailable;           ///< array of extensions requested by the app through AppConfiguration::AdditionalVulkanLayerExtensions that the device has available

#if defined (OS_ANDROID)
    bool                                m_ExtExternMemoryCapsAvailable;
    bool                                m_ExtAndroidExternalMemoryAvailable;
#endif // defined (OS_ANDROID)

    int                                 m_VulkanGraphicsQueueIndx;
    bool                                m_VulkanGraphicsQueueSupportsCompute;
    int                                 m_VulkanAsyncComputeQueueIndx;
    std::vector<VkQueueFamilyProperties>m_pVulkanQueueProps;

    std::vector<VkSurfaceFormatKHR>     m_SurfaceFormats;       ///< Available formats
    VkSurfaceKHR                        m_VulkanSurface;        ///< Current surface format format
    VkSurfaceCapabilitiesKHR            m_VulkanSurfaceCaps;    ///< Capabilities of current surface format
    VkSurfaceTransformFlagBitsKHR       m_SwapchainPreTransform;///< Current swapchain pre-transform

    VkPhysicalDeviceMemoryProperties    m_MemoryProperties;

    MemoryManager                       m_MemoryManager;

    VkCommandBuffer                     m_SetupCmdBuffer;
};
