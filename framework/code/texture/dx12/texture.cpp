//=============================================================================
//
//                  Copyright (c) 2022 QUALCOMM Technologies Inc.
//                              All Rights Reserved.
//
//==============================================================================

#include "memory/dx12/memoryMapped.hpp"
#include "texture.hpp"
#include "dx12/dx12.hpp"
#include "system/os_common.h"
#include <array>


Texture<Dx12>::Texture() noexcept : TextureBase()
{}

Texture<Dx12>::Texture(uint32_t width, uint32_t height, uint32_t depth, uint32_t mipLevels, TextureFormat format, D3D12_TEXTURE_LAYOUT textureLayout, MemoryAllocatedBuffer<Dx12, ID3D12Resource*> resourceBuffer/*, const Sampler<Dx12>& sampler*/ ) noexcept
    : TextureBase()
    , Width(width)
    , Height(height)
    , Depth(depth)
    , MipLevels(mipLevels)
    , Format(format)
    , TextureLayout(textureLayout)
    , MemoryBuffer(std::move(resourceBuffer))
//    , Sampler(sampler)
{
    ResourceViewDesc = {
        .Format = TextureFormatToDx(format),
        .ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D,
        .Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING,
        .Texture2D {
            .MostDetailedMip = 0,
            .MipLevels = mipLevels
    } };
}

//
// Constructors/move-operators for Texture<Dx12>.
// Ensures we are not leaking owned members.
//
Texture<Dx12>::Texture(Texture<Dx12>&& other) noexcept
{
    *this = std::move(other);
}
Texture<Dx12>& Texture<Dx12>::operator=(Texture<Dx12>&& other) noexcept
{
    if (this != &other)
    {
        // Some of the data can be copied and is ok to leave 'other' alone (move operator just has to ensure the 'other' is in a valid state and can be safely deleted)
        Width = other.Width;
        Height = other.Height;
        Depth = other.Depth;
        MipLevels = other.MipLevels;
        FirstMip = other.FirstMip;
        Format = other.Format;
        TextureLayout = other.TextureLayout;
        ResourceViewDesc = other.ResourceViewDesc;
        // Actually transfer ownership from 'other'
        MemoryBuffer = std::move(other.MemoryBuffer);
//        Sampler = other.Sampler;
//        other.Sampler = {};
    }
    return *this;
}

Texture<Dx12>::~Texture() noexcept
{
    // Asserts to ensure we called ReleaseTexture on this already.
    assert(IsEmpty());
}

void Texture<Dx12>::Release(GraphicsApiBase* pGraphicsApi)
{
    auto* pDx12 = static_cast<Dx12*>(pGraphicsApi);

    //Sampler = {};

    if (MemoryBuffer)
        pDx12->GetMemoryManager().Destroy(std::move(MemoryBuffer));
}

bool Texture<Dx12>::IsEmpty() const
{
    return !MemoryBuffer;
}

constexpr UINT EnumToDx12( Msaa m ) { return UINT( m ); }


//-----------------------------------------------------------------------------
// Implementation of template function specialization
template<>
Texture<Dx12> CreateTextureObject<Dx12>( Dx12& dx12, const CreateTexObjectInfo& texInfo, MemoryPool<Dx12>* pPool )
//-----------------------------------------------------------------------------
{
    assert( pPool == nullptr );//Needs implementing if used

    if (texInfo.pName == nullptr)
        LOGI( "CreateTextureObject (%dx%d): <No Name>", texInfo.uiWidth, texInfo.uiHeight );
    else
        LOGI( "CreateTextureObject (%dx%d): %s", texInfo.uiWidth, texInfo.uiHeight, texInfo.pName );

    D3D12_TEXTURE_LAYOUT imageLayout = D3D12_TEXTURE_LAYOUT_UNKNOWN;
    D3D12_RESOURCE_FLAGS resourceFlags = D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET;
    D3D12_RESOURCE_STATES resourceState = D3D12_RESOURCE_STATE_RENDER_TARGET;
    D3D12_CLEAR_VALUE clearValue{.Format = TextureFormatToDx( texInfo.Format ), .Color = {}};
    if (texInfo.TexType == TT_DEPTH_TARGET)
    {
        resourceFlags = D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL;
        resourceState = D3D12_RESOURCE_STATE_DEPTH_WRITE;
        clearValue.DepthStencil = {.Depth = 1.0f, .Stencil = 0};
    }
    const D3D12_RESOURCE_DESC textureDesc = { .Dimension = ( texInfo.uiDepth == 1 ) ? D3D12_RESOURCE_DIMENSION_TEXTURE2D : D3D12_RESOURCE_DIMENSION_TEXTURE3D,
                                              .Alignment = 0,
                                              .Width = texInfo.uiWidth,
                                              .Height = texInfo.uiHeight,
                                              .DepthOrArraySize = (UINT16) texInfo.uiDepth,
                                              .MipLevels = (UINT16) texInfo.uiMips,
                                              .Format = clearValue.Format,
                                              .SampleDesc = {.Count = EnumToDx12(texInfo.Msaa), .Quality = 0 },
                                              .Layout = imageLayout,
                                              .Flags = resourceFlags
    };

    auto& memoryManager = dx12.GetMemoryManager();
    auto gpuBuffer = memoryManager.CreateImage( textureDesc, MemoryUsage::GpuExclusive, resourceState, clearValue );
    if (!gpuBuffer)
        return {};

    return{ texInfo.uiWidth, texInfo.uiHeight, texInfo.uiDepth, texInfo.uiMips, texInfo.Format, imageLayout, std::move(gpuBuffer) };
}


//-----------------------------------------------------------------------------
// Implementation of template function specialization
template<>
Texture<Dx12> CreateTextureFromBuffer<Dx12>( Dx12& dx12, const void* pData, size_t DataSize, uint32_t Width, uint32_t Height, uint32_t Depth, TextureFormat Format, SamplerAddressMode SamplerMode, SamplerFilter Filter, const char* pName )
//-----------------------------------------------------------------------------
{
    assert( 0 && "unimplemented!" );    ///TODO: implement!
    return {};
}

//-----------------------------------------------------------------------------
// Implementation of template function specialization
template<>
Texture<Dx12> CreateTextureObjectView( Dx12&, const Texture<Dx12>& original, TextureFormat viewFormat )
//-----------------------------------------------------------------------------
{
    assert( 0 && "unimplemented!" );    ///TODO: implement!
    return {};
}


//-----------------------------------------------------------------------------
// Implementation of template function specialization
template<>
void ReleaseTexture<Dx12>( Dx12& dx12, Texture<Dx12>* pTexture )
//-----------------------------------------------------------------------------
{
    pTexture->Release(&dx12);
    *pTexture = Texture<Dx12>{};    // destroy and clear
}


static constexpr std::array<DXGI_FORMAT, 247> sTextureFormatToDx {
    DXGI_FORMAT_UNKNOWN,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R4G4_UNORM_PACK8,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R4G4B4A4_UNORM_PACK16,
    DXGI_FORMAT_B4G4R4A4_UNORM,// VK_FORMAT_B4G4R4A4_UNORM_PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R5G6B5_UNORM_PACK16,
    DXGI_FORMAT_B5G6R5_UNORM,// VK_FORMAT_B5G6R5_UNORM_PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R5G5B5A1_UNORM_PACK16,
    DXGI_FORMAT_B5G5R5A1_UNORM,// VK_FORMAT_B5G5R5A1_UNORM_PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A1R5G5B5_UNORM_PACK16,
    DXGI_FORMAT_R8_UNORM,// VK_FORMAT_R8_UNORM,
    DXGI_FORMAT_R8_SNORM,// VK_FORMAT_R8_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8_SSCALED,
    DXGI_FORMAT_R8_UINT,// VK_FORMAT_R8_UINT,
    DXGI_FORMAT_R8_SINT,// VK_FORMAT_R8_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8_SRGB,
    DXGI_FORMAT_R8G8_UNORM,// VK_FORMAT_R8G8_UNORM,
    DXGI_FORMAT_R8G8_SNORM,// VK_FORMAT_R8G8_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8_SSCALED,
    DXGI_FORMAT_R8G8_UINT,// VK_FORMAT_R8G8_UINT,
    DXGI_FORMAT_R8G8_SINT,// VK_FORMAT_R8G8_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8_SRGB,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8_SSCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8_SRGB,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8_SSCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8_SRGB,
    DXGI_FORMAT_R8G8B8A8_UNORM,// VK_FORMAT_R8G8B8A8_UNORM,
    DXGI_FORMAT_R8G8B8A8_SNORM,// VK_FORMAT_R8G8B8A8_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8A8_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R8G8B8A8_SSCALED,
    DXGI_FORMAT_R8G8B8A8_UINT,// VK_FORMAT_R8G8B8A8_UINT,
    DXGI_FORMAT_R8G8B8A8_SINT,// VK_FORMAT_R8G8B8A8_SINT,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,// VK_FORMAT_R8G8B8A8_SRGB,
    DXGI_FORMAT_B8G8R8A8_UNORM,// VK_FORMAT_B8G8R8A8_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8A8_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8A8_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8A8_SSCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8A8_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8A8_SINT,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,// VK_FORMAT_B8G8R8A8_SRGB,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A8B8G8R8_UNORM_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A8B8G8R8_SNORM_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A8B8G8R8_USCALED_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A8B8G8R8_UINT_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A8B8G8R8_SINT_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A8B8G8R8_SRGB_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2R10G10B10_UNORM_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2R10G10B10_SNORM_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2R10G10B10_USCALED_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2R10G10B10_UINT_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2R10G10B10_SINT_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2B10G10R10_UNORM_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2B10G10R10_SNORM_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2B10G10R10_USCALED_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2B10G10R10_UINT_PACK32,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A2B10G10R10_SINT_PACK32,
    DXGI_FORMAT_R16_UNORM,// VK_FORMAT_R16_UNORM,
    DXGI_FORMAT_R16_SNORM,// VK_FORMAT_R16_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16_SSCALED,
    DXGI_FORMAT_R16_UINT,// VK_FORMAT_R16_UINT,
    DXGI_FORMAT_R16_SINT,// VK_FORMAT_R16_SINT,
    DXGI_FORMAT_R16_FLOAT,// VK_FORMAT_R16_SFLOAT,
    DXGI_FORMAT_R16G16_UNORM,// VK_FORMAT_R16G16_UNORM,
    DXGI_FORMAT_R16G16_SNORM,// VK_FORMAT_R16G16_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16_SSCALED,
    DXGI_FORMAT_R16G16_UINT,// VK_FORMAT_R16G16_UINT,
    DXGI_FORMAT_R16G16_SINT,// VK_FORMAT_R16G16_SINT,
    DXGI_FORMAT_R16G16_FLOAT,// VK_FORMAT_R16G16_SFLOAT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16_SSCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16_SFLOAT,
    DXGI_FORMAT_R16G16B16A16_UNORM,// VK_FORMAT_R16G16B16A16_UNORM,
    DXGI_FORMAT_R16G16B16A16_SNORM,// VK_FORMAT_R16G16B16A16_SNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16A16_USCALED,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R16G16B16A16_SSCALED,
    DXGI_FORMAT_R16G16B16A16_UINT,// VK_FORMAT_R16G16B16A16_UINT,
    DXGI_FORMAT_R16G16B16A16_SINT,// VK_FORMAT_R16G16B16A16_SINT,
    DXGI_FORMAT_R16G16B16A16_FLOAT,// VK_FORMAT_R16G16B16A16_SFLOAT,
    DXGI_FORMAT_R32_UINT,// VK_FORMAT_R32_UINT,
    DXGI_FORMAT_R32_SINT,// VK_FORMAT_R32_SINT,
    DXGI_FORMAT_R32_FLOAT,// VK_FORMAT_R32_SFLOAT,
    DXGI_FORMAT_R32G32_UINT,// VK_FORMAT_R32G32_UINT,
    DXGI_FORMAT_R32G32_SINT,// VK_FORMAT_R32G32_SINT,
    DXGI_FORMAT_R32G32_FLOAT,// VK_FORMAT_R32G32_SFLOAT,
    DXGI_FORMAT_R32G32B32_UINT,// VK_FORMAT_R32G32B32_UINT,
    DXGI_FORMAT_R32G32B32_SINT,// VK_FORMAT_R32G32B32_SINT,
    DXGI_FORMAT_R32G32B32_FLOAT,// VK_FORMAT_R32G32B32_SFLOAT,
    DXGI_FORMAT_R32G32B32A32_UINT,// VK_FORMAT_R32G32B32A32_UINT,
    DXGI_FORMAT_R32G32B32A32_SINT,// VK_FORMAT_R32G32B32A32_SINT,
    DXGI_FORMAT_R32G32B32A32_FLOAT,// VK_FORMAT_R32G32B32A32_SFLOAT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64_SFLOAT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64_SFLOAT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64B64_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64B64_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64B64_SFLOAT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64B64A64_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64B64A64_SINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R64G64B64A64_SFLOAT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B10G11R11_UFLOAT_PACK32,     //DXGI_FORMAT_R11G11B10_FLOAT
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,      //DXGI_FORMAT_R9G9B9E5_SHAREDEXP
    DXGI_FORMAT_D16_UNORM,// VK_FORMAT_D16_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_X8_D24_UNORM_PACK32,         //DXGI_FORMAT_R24_UNORM_X8_TYPELESS
    DXGI_FORMAT_D32_FLOAT,// VK_FORMAT_D32_SFLOAT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_S8_UINT,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_D16_UNORM_S8_UINT,
    DXGI_FORMAT_D24_UNORM_S8_UINT,// VK_FORMAT_D24_UNORM_S8_UINT,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,// VK_FORMAT_D32_SFLOAT_S8_UINT,
    DXGI_FORMAT_BC1_UNORM,// VK_FORMAT_BC1_RGB_UNORM_BLOCK,
    DXGI_FORMAT_BC1_UNORM_SRGB,// VK_FORMAT_BC1_RGB_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
    DXGI_FORMAT_BC2_UNORM,// VK_FORMAT_BC2_UNORM_BLOCK,
    DXGI_FORMAT_BC2_UNORM_SRGB,// VK_FORMAT_BC2_SRGB_BLOCK,
    DXGI_FORMAT_BC3_UNORM,// VK_FORMAT_BC3_UNORM_BLOCK,
    DXGI_FORMAT_BC3_UNORM_SRGB,// VK_FORMAT_BC3_SRGB_BLOCK,
    DXGI_FORMAT_BC4_UNORM,// VK_FORMAT_BC4_UNORM_BLOCK,
    DXGI_FORMAT_BC4_SNORM,// VK_FORMAT_BC4_SNORM_BLOCK,
    DXGI_FORMAT_BC5_UNORM,// VK_FORMAT_BC5_UNORM_BLOCK,
    DXGI_FORMAT_BC5_SNORM,// VK_FORMAT_BC5_SNORM_BLOCK,
    DXGI_FORMAT_BC6H_UF16,// VK_FORMAT_BC6H_UFLOAT_BLOCK,
    DXGI_FORMAT_BC6H_SF16,// VK_FORMAT_BC6H_SFLOAT_BLOCK,
    DXGI_FORMAT_BC7_UNORM,// VK_FORMAT_BC7_UNORM_BLOCK,
    DXGI_FORMAT_BC7_UNORM_SRGB,// VK_FORMAT_BC7_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_EAC_R11_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_EAC_R11_SNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_12x12_SRGB_BLOCK,    //184
    
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, //1000054000
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
    
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK, //1000066000
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,

    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G8B8G8R8_422_UNORM,   //1000156000
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B8G8R8G8_422_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R10X6_UNORM_PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R12X4_UNORM_PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G16B16G16R16_422_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_B16G16R16G16_422_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A4R4G4B4_UNORM_PACK16,
    DXGI_FORMAT_UNKNOWN, // VK_FORMAT_A4B4G4R4_UNORM_PACK16,
};


//-----------------------------------------------------------------------------
DXGI_FORMAT TextureFormatToDx(TextureFormat f)
//-----------------------------------------------------------------------------
{
    return sTextureFormatToDx[uint32_t(f)];
}

