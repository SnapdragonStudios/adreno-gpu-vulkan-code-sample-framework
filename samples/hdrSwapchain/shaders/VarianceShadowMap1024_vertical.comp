//============================================================================================================
//
//
//                  Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
//                              SPDX-License-Identifier: BSD-3-Clause
//
//============================================================================================================

#version 450
#extension GL_ARB_separate_shader_objects : enable

//
// VarianceShadowMap Filter
// Second pass filters vertically, using LDS memory to grab a column of data and blur vertically (separable blur).
// Workgroup size limit (and hardcoded values) require that the input is a 1024x1024 depth texture!
//

#define WORKGROUP_SIZE_X (1)
#define WORKGROUP_SIZE_Y (1024)

layout (local_size_x = WORKGROUP_SIZE_X, local_size_y = WORKGROUP_SIZE_Y, local_size_z = 1 ) in;
layout(set = 0, binding = 0, rg32f) uniform image2D image;


//const int cFilterWidth = 4;
//const float coefficients[] = {0.0162162162, 0.0540540541, 0.1216216216, 0.1945945946, 0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162};
const int cFilterWidth = 10;
const float coefficients[] = {0.000539, 0.001533, 0.003908, 0.008925, 0.018255, 0.033446, 0.054891, 0.080693, 0.106259, 0.125337, 0.132429, 0.125337, 0.106259, 0.080693, 0.054891, 0.033446, 0.018255, 0.008925, 0.003908, 0.001533, 0.000539};

const int cMaxLinePixels = WORKGROUP_SIZE_Y;
const int cNumPixelsCache = cMaxLinePixels + cFilterWidth*2;
shared vec2 sDepthLine[cNumPixelsCache];

void main() {
    // read pixel (depth and depth squared), write to cache and wait for all the pixels in this line to finish
    vec4 depth = imageLoad(image, ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y));
    sDepthLine[gl_GlobalInvocationID.y + cFilterWidth] = depth.xy;
    // mirrror the edge values
    if (gl_GlobalInvocationID.y < cFilterWidth)
    {
        sDepthLine[cFilterWidth - 1 - gl_GlobalInvocationID.y] = depth.xy;
    }
    else if (gl_GlobalInvocationID.y >= cMaxLinePixels - cFilterWidth)
    {
        sDepthLine[cFilterWidth + cMaxLinePixels*2 - 1 - gl_GlobalInvocationID.y] = depth.xy;
    }

    // wait for all workgroup threads to be finished
    barrier();

    // Now do the averaging for our pixel
#if 1
    vec2 sum = vec2(0.0f);
    for(int i=0;i<=cFilterWidth*2;++i)
    {
        sum += sDepthLine[gl_GlobalInvocationID.y + i] * coefficients[i];
    }
#else
    vec2 sum = sDepthLine[gl_GlobalInvocationID.y + cFilterWidth];
#endif
    imageStore(image, ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y), vec4(sum, 0.0, 0.0));
}
