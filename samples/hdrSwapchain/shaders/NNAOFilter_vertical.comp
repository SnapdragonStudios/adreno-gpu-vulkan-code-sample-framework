//============================================================================================================
//
//
//                  Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
//                              SPDX-License-Identifier: BSD-3-Clause
//
//============================================================================================================

#version 450
#extension GL_ARB_separate_shader_objects : enable

//
// Gaussian Filter for NNAO output (8bit intensity)
// Verical pass of the 'separable' filter doing a gaussian blur on the input image.
// By doing in two passes the LDS memory can be used as a cache for pixel values, increasing throughput.
//

#define WORKGROUP_SIZE (64)

const int cFilterHeight = 4;
const int cMaxLinePizels = WORKGROUP_SIZE;
const int cNumPixelsCache = cMaxLinePizels + cFilterHeight*2;
shared float sPixelLine[cNumPixelsCache];

//float coefficients[] = {0.063327,0.093095,0.122589,0.144599,0.152781,0.144599,0.122589,0.093095,0.063327};
float coefficients[] = {0.0162162162, 0.0540540541, 0.1216216216, 0.1945945946, 0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162};


layout (local_size_x = 1, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

layout(set = 0, binding = 0, r8) uniform readonly image2D imageSrc;
layout(set = 0, binding = 1, r8) uniform image2D imageDest;
layout(std140, set = 0, binding = 2) uniform readonly _ctrl
{
    int width;
    int height;
} ctrl;



void main() {

    // Fill pixel cache with enough data to filter 'cMaxLinePizels' pixels (so needs to read cMaxLinePixels plus 2*cFilterHeight pixels for the top and bottom 'gutters')
    if (gl_LocalInvocationID.y < cFilterHeight)
    {
        // The first 'cFilterHeight' invocations needs to fill the 'top gutter' - so do two pixel copies.
        // The 'max' is there to clamp to the edge of the source (so we dont read off the start of the image)
        sPixelLine[gl_LocalInvocationID.y*2]   = imageLoad(imageSrc, ivec2(gl_GlobalInvocationID.x, max(0,int(gl_GlobalInvocationID.y + gl_LocalInvocationID.y - cFilterHeight)))).r;
        sPixelLine[gl_LocalInvocationID.y*2+1] = imageLoad(imageSrc, ivec2(gl_GlobalInvocationID.x, max(0,int(gl_GlobalInvocationID.y + gl_LocalInvocationID.y - cFilterHeight + 1)))).r;
    }
    else if (gl_LocalInvocationID.y >= WORKGROUP_SIZE-cFilterHeight)
    {
        // The last 'cFilterHeight' invocations needs to fill the 'bottom gutter' - so do two pixel copies.
        // The 'min' is there to clamp to the edge of the source (so we dont read off the end of the image)
        sPixelLine[gl_LocalInvocationID.y*2-WORKGROUP_SIZE+cFilterHeight*2]   = imageLoad(imageSrc, ivec2(gl_GlobalInvocationID.x, min(ctrl.height-1,gl_GlobalInvocationID.y + gl_LocalInvocationID.y - WORKGROUP_SIZE + cFilterHeight))).r;
        sPixelLine[gl_LocalInvocationID.y*2-WORKGROUP_SIZE+cFilterHeight*2+1] = imageLoad(imageSrc, ivec2(gl_GlobalInvocationID.x, min(ctrl.height-1,gl_GlobalInvocationID.y + gl_LocalInvocationID.y - WORKGROUP_SIZE + cFilterHeight + 1))).r;
    }
    else
    {
        // 'middle' invocations just read and write one pixel
        sPixelLine[gl_LocalInvocationID.y + cFilterHeight] = imageLoad(imageSrc, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).r;
    }

    barrier();    

    // Now do the averaging
#if 1
    float sum = 0.0f;
    for(int i=0;i<=cFilterHeight*2;++i)
    {
        sum += coefficients[i] * sPixelLine[gl_LocalInvocationID.y + i];
    }
#else
    float sum = sPixelLine[gl_LocalInvocationID.y + cFilterHeight];
#endif
    imageStore(imageDest, ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y), vec4(sum));
}
