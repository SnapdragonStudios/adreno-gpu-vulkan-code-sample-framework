//=============================================================================================
//
//
//                  Copyright (c) 2022, Qualcomm Innovation Center, Inc. All rights reserved.
//                              SPDX-License-Identifier: BSD-3-Clause
//
//=============================================================================================

#version 450
#extension GL_ARB_separate_shader_objects : enable

//
// Gaussian Filter for NNAO output (8bit intensity)
// Horizontal pass of the 'separable' filter doing a gaussian blur on the input image.
// By doing in two passes the LDS memory can be used as a cache for pixel values, increasing throughput.
//

#define WORKGROUP_SIZE (64)

const int cFilterWidth = 4;
const int cMaxLinePizels = WORKGROUP_SIZE;
const int cNumPixelsCache = cMaxLinePizels + cFilterWidth*2;
shared float sPixelLine[cNumPixelsCache];

//float coefficients[] = {0.063327,0.093095,0.122589,0.144599,0.152781,0.144599,0.122589,0.093095,0.063327};
float coefficients[] = {0.0162162162, 0.0540540541, 0.1216216216, 0.1945945946, 0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162};


layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

layout(set = 0, binding = 0) uniform sampler2D imageSrc;
layout(set = 0, binding = 1, r8) uniform image2D imageDest;
layout(std140, set = 0, binding = 2) uniform readonly _ctrl
{
    int width;
    int height;
} ctrl;



void main() {

    const vec2 invSize = vec2(1.0/ctrl.width,1.0f/ctrl.height);     // image dimensions

    // Fill pixel cache with enough data to filter 'cMaxLinePizels' pixels (so needs to read cMaxLinePixels plus 2*cFilterWidth pixels for the left and right 'gutters')
    if (gl_LocalInvocationID.x < cFilterWidth)
    {
        // The first 'cFilterWidth' invocations needs to fill the 'left gutter' - so do two pixels.
        // The 'max' is there to clamp to the edge of the source (so we dont read off the start of the image)
        sPixelLine[gl_LocalInvocationID.x*2]   = texture(imageSrc, invSize * vec2(max(0, int(gl_GlobalInvocationID.x + gl_LocalInvocationID.x - cFilterWidth)), gl_GlobalInvocationID.y)).r;
        sPixelLine[gl_LocalInvocationID.x*2+1] = texture(imageSrc, invSize * vec2(max(0, int(gl_GlobalInvocationID.x + gl_LocalInvocationID.x - cFilterWidth + 1)), gl_GlobalInvocationID.y)).r;
    }
    else if (gl_LocalInvocationID.x >= WORKGROUP_SIZE-cFilterWidth)
    {
        // The last 'cFilterWidth' invocations needs to fill the 'right gutter'.
        // The 'min' is there to clamp to the edge of the source (so we dont read off the start of the image)
        sPixelLine[gl_LocalInvocationID.x*2-WORKGROUP_SIZE+cFilterWidth*2]   = texture(imageSrc, invSize * vec2(min(ctrl.width-1,gl_GlobalInvocationID.x + gl_LocalInvocationID.x - WORKGROUP_SIZE + cFilterWidth), gl_GlobalInvocationID.y)).r;
        sPixelLine[gl_LocalInvocationID.x*2-WORKGROUP_SIZE+cFilterWidth*2+1] = texture(imageSrc, invSize * vec2(min(ctrl.width-1,gl_GlobalInvocationID.x + gl_LocalInvocationID.x - WORKGROUP_SIZE + cFilterWidth + 1), gl_GlobalInvocationID.y)).r;
    }
    else
    {
        // 'middle' invocations just read and write one pixel
        sPixelLine[gl_LocalInvocationID.x + cFilterWidth] = texture(imageSrc, invSize * vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).r;
    }

    barrier();

    // Now do the averaging
#if 1
    float sum = 0.0f;
    for(int i=0;i<=cFilterWidth*2;++i)
    {
        sum += coefficients[i] * sPixelLine[gl_LocalInvocationID.x + i];
    }
#else
    float sum = sPixelLine[gl_LocalInvocationID.x + cFilterWidth];
#endif
    imageStore(imageDest, ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y), vec4(sum));
}
