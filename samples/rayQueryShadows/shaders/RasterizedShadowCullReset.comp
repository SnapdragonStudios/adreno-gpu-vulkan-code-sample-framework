//============================================================================================================
//
//
//                  Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
//                              SPDX-License-Identifier: BSD-3-Clause
//
//============================================================================================================

//
// Reset the culling data prior to writing.
//

#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#extension GL_EXT_shader_8bit_storage : enable

// Uniform buffer locations
// Texture Locations
// Storage Locations
#define CULLED_INSTANCES_STORAGE_LOCATION   0
#define CULLED_INDIRECT_STORAGE_LOC         1

// Compute workgroup layout
#define WORKGROUP_SIZE 1
layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

struct VkDrawIndexedIndirectCommand
{
    uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    uint    vertexOffset;
    uint    firstInstance;
};

// Inputs layout

// Outputs
layout(std430, set = 0, binding = CULLED_INSTANCES_STORAGE_LOCATION) buffer CulledInstancesOutput
{
    uint       numVisibleInstances;     // number of instances in visibleInstances[]
    uint       _pad1,_pad2,_pad3;
    int        visibleInstances[];      // -1 (not visible) or position within range [0...numVisibleInstances-1] (ie which visible instance this is)
} CulledInstancesOutputSB;

layout(std430, set = 0, binding = CULLED_INDIRECT_STORAGE_LOC) buffer CulledIndirectOutput
{
    uint                            numIndirect;        // atomic count of number of visible meshlets
    uint                            _pad1,_pad2,_pad3;
    uint                            _pad4[12];          // pad to align the indirect commands to 64 byte boundary!
    VkDrawIndexedIndirectCommand    indirectCommands[]; // Draw indirect commands for visible meshes, must be last item in buffer
} CulledIndirectOutputSB;



//-----------------------------------------------------------------------------
void main() 
//-----------------------------------------------------------------------------
{
    CulledInstancesOutputSB.numVisibleInstances = 0;
    CulledIndirectOutputSB.numIndirect = 0;
}
