//============================================================================================================
//
//
//                  Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
//                              SPDX-License-Identifier: BSD-3-Clause
//
//============================================================================================================

#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

//
// VarianceShadowMap Filter
// First pass generates the depth & depth squared values with a horizontal filter kernel.
//

#define WORKGROUP_SIZE_X (8)
#define WORKGROUP_SIZE_Y (8)

precision mediump float;
precision mediump int;

layout (local_size_x = WORKGROUP_SIZE_X, local_size_y = WORKGROUP_SIZE_Y, local_size_z = 1 ) in;
//layout(set = 0, binding = 0, r32f) uniform readonly image2D imageSrc;
layout(set = 0, binding = 0/*, r32f*/) uniform mediump sampler2D imageSrc;
layout(set = 0, binding = 1, rgba16f) uniform mediump image2D imageIntemediateDest;

const int cFilterWidth = 4;
const float cfFilterWidth = 4.0;
const float coefficients[] = {0.0162162162HF, 0.0540540541HF, 0.1216216216HF, 0.1945945946HF, 0.2270270270HF, 0.1945945946HF, 0.1216216216HF, 0.0540540541HF, 0.0162162162HF};

const int cMaxLinePizels = WORKGROUP_SIZE_X;
const int cMaxLinePixels = cMaxLinePizels + cFilterWidth;

void main() {
#if 1

    //
    // Raw texture read (gather) version
    //
    vec2 gatheredDepth[2*(cFilterWidth+1)];    // x component is upper line, y component is lower line
    // Grab (cFilterWidth+1)*2 horizontal depth values, for 2 (vertical) rows (4 pixels at a time using gather)
    // Gather access pattern is: A B
    //                           R G
    vec2 vCenterTex = vec2((gl_GlobalInvocationID.x)*2 + 0.5, gl_GlobalInvocationID.y*2 + 0.5)/1024.0f;
    for(int i=0;i<=cFilterWidth;++i)
    {
        vec4 d = textureGatherOffset(imageSrc, vCenterTex, ivec2(i - cfFilterWidth, 0 ));
        gatheredDepth[i*2+0] = vec2(d.w, d.x);
        gatheredDepth[i*2+1] = vec2(d.z, d.y);
    }

    vec4 sum  = vec4(0.0f);
    vec4 sum2 = vec4(0.0f);
    for(int i=0;i<=cFilterWidth*2;++i)
    {
        float c = coefficients[(i<cFilterWidth) ? i : (2*cFilterWidth-i)];
        vec4 d = vec4(gatheredDepth[i], gatheredDepth[i+1]);
        sum += c * d;
        sum2 += c * d * d;
    }
    // Write depth sum and depth ^2 sum for 2 adjacent (in x) pixels
    imageStore(imageIntemediateDest, ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y*2), vec4(sum.x, sum2.x, sum.z, sum2.z));
    // Write depth sum and depth ^2 sum for 2 adjacent (in x) pixels on next line down
    imageStore(imageIntemediateDest, ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y*2+1), vec4(sum.y, sum2.y, sum.w, sum2.w));
#else

    //
    // Shared memory (and gather) version
    //
    shared vec4 sDepthLine[cMaxLinePixels];

    // read pixel (depth), write to cache and wait for all the pixels in this line to finish
    //vec4 depth = imageLoad(imageSrc, ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y));
    vec4 depth = textureGather(imageSrc, vec2(gl_GlobalInvocationID.x + 0.5, gl_GlobalInvocationID.y + 0.5)/512.0f );
    sDepthLine[gl_GlobalInvocationID.x + cFilterWidth] = depth;

    // mirrror the edge values
    if (gl_GlobalInvocationID.x < cFilterWidth/2)
    {
        sDepthLine[cFilterWidth/2 - 1 - gl_GlobalInvocationID.x] = depth;
    }
    else if (gl_GlobalInvocationID.x >= cMaxLinePixels - cFilterWidth/2)
    {
        sDepthLine[cFilterWidth + cMaxLinePixels - 1 - gl_GlobalInvocationID.x] = depth;
    }

    barrier();

    // Now do the averaging for our 4 pixels
#if 1
    vec4 sumD  = vec4(0.0f);
    vec4 sumD2 = vec4(0.0f);
    for(int i=0;i<=cFilterWidth*2;++i)
    {
        float c = coefficients[i];
        vec4 d = sDepthLine[gl_GlobalInvocationID.x + i];
        sumD  += c * d;     // sum depth
        sumD2 += c * d * d; // sum depth squared
    }
#else
    float d = sDepthLine[gl_GlobalInvocationID.x + cFilterWidth];
    vec2 sum = vec2(d, d*d);
#endif
    imageStore(imageDest, ivec2(gl_GlobalInvocationID.x*2,gl_GlobalInvocationID.y*2), vec4(sumD.w, sumD2.w, 0.0, 0.0));
    imageStore(imageDest, ivec2(gl_GlobalInvocationID.x*2+1,gl_GlobalInvocationID.y*2), vec4(sumD.z, sumD2.z, 0.0, 0.0));
    imageStore(imageDest, ivec2(gl_GlobalInvocationID.x*2,gl_GlobalInvocationID.y*2+1), vec4(sumD.x, sumD2.x, 0.0, 0.0));
    imageStore(imageDest, ivec2(gl_GlobalInvocationID.x*2+1,gl_GlobalInvocationID.y*2+1), vec4(sumD.y, sumD2.y, 0.0, 0.0));
#endif
}
