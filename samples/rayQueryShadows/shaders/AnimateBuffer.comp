//============================================================================================================
//
//
//                  Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
//                              SPDX-License-Identifier: BSD-3-Clause
//
//============================================================================================================

//
// Animate Buffer compute shader
// Procedurally animates an array of vertex data (in a storage buffer)
//

#version 460

#extension GL_ARB_separate_shader_objects : enable

// Buffer locations
#define SHADER_INPUTVERTICES_LOC            0
#define SHADER_OUTPUTVERTICES_LOC           1
#define SHADER_UNIFORM_LOC                  2

#define WORKGROUP_SIZE (128)
layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1 ) in;

layout(std430, binding = SHADER_INPUTVERTICES_LOC) restrict buffer inputVertexData
{
    vec3 positions[];
} InputVertexData;

layout(std430, binding = SHADER_OUTPUTVERTICES_LOC) restrict buffer outputVertexData
{
    vec3 positions[];
} OutputVertexData;

layout(std140, binding = SHADER_UNIFORM_LOC) restrict uniform Uniform
{
    vec4 AnimationRotation;
} UniformData;


#define PI (3.14159)


//-----------------------------------------------------------------------------
void main() 
//-----------------------------------------------------------------------------
{
    vec3 LocalPosition = InputVertexData.positions[gl_GlobalInvocationID.x];

    vec3 offset, tmp;
    offset.x = modf(LocalPosition.x*0.01, tmp.x);
    offset.y = 0.0;
    offset.z = modf(LocalPosition.z*0.01, tmp.y);
    float sway = clamp(LocalPosition.y, 0.0, -2.0) * 1.0;
    LocalPosition.x = LocalPosition.x + sin(UniformData.AnimationRotation.z)*sway + 1.0*sin(UniformData.AnimationRotation.x + 2.0 * PI * offset.x);
    LocalPosition.z = LocalPosition.z + sin(UniformData.AnimationRotation.w)*sway + 1.0*sin(UniformData.AnimationRotation.y + 2.0 * PI * offset.z);

    OutputVertexData.positions[gl_GlobalInvocationID.x] = LocalPosition;
}
